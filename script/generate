#!/bin/sh
#/ script/generate generates code and docs.
#/ `script/generate --check` checks that the generated files are up to date.

set -e

CDPATH="" cd -- "$(dirname -- "$0")/.."

if [ "$1" = "--check" ]; then
  GENTEMP="$(mktemp -d)"
  git worktree add -q "$GENTEMP"
  trap 'git worktree remove -f "$GENTEMP"' EXIT
  for f in $(git ls-files -com --exclude-standard); do
    target="$GENTEMP/$f"
    mkdir -p "$(dirname -- "$target")"
    cp "$f" "$target"
  done
  ln -s "$(pwd)"/bin "$GENTEMP"/bin
  (
    cd "$GENTEMP"
    git add .
    git commit -q -m "Generate"
    script/generate
    [ -z "$(git status --porcelain)" ] || {
      git status echo "script/generate resulted in changes." 1>&2
      git diff
      exit 1
    }
  )
  exit 0
fi

for file in actionslog.go actionslog_test.go yaml.go base.go internal/example/example.go; do
  # if file ends in _test.go, rename it to _exp_test.go
  # if it ends in .go, rename it to _exp.go
  x_file="$(
    echo "$file" |
      sed 's/\.go$/_exp.go/' |
      sed 's/_test_exp\.go$/_exp_test.go/'
  )"
  printf "// Code generated by script/generate. DO NOT EDIT.\n\n" > "$x_file"
  sed 's/\/\/go:build go1\.21/\/\/go:build !go1\.21/' "$file" |
    sed 's/"log\/slog"/"golang.org\/x\/exp\/slog"/' >> "$x_file"
done

script/fmt
go generate ./...
go mod tidy

if [ -f script/update-docs ]; then
  ./script/update-docs
fi
